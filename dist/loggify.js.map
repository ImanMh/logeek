{"version":3,"sources":["loggify.js"],"names":[],"mappings":";;AAAA,IAAI,OAAO,GAAG,CAAC,YAAY;AACzB,MAAI,MAAM,GAAG;AACX,UAAM,EAAE,UAAU;AAClB,aAAS,EAAE,GAAG;GACf,CAAC;;AAEF,MAAI,OAAO,GAAG,SAAV,OAAO,GAAe;AACxB,QAAI,IAAI,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAChD,QAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,EACnC,OAAO;;AAET,QAAI,IAAI,CAAC,GAAG,YAAY,KAAK,EAC3B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,KAElC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;GACpC,CAAC;;AAEF,SAAO,CAAC,IAAI,GAAG,UAAU,MAAM,EAAE;AAC/B,UAAM,CAAC,MAAM,GAAG,MAAM,CAAC;GACxB,CAAC;;AAEF,WAAS,SAAS,CAAE,GAAG,EAAE,MAAM,EAAE;AAC/B,QAAI,OAAO,MAAM,KAAK,WAAW,EAC/B,OAAO,MAAM,CAAC,MAAM,KAAK,UAAU,CAAC,KAEpC,OAAO,MAAM,KAAK,MAAM,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;GAC1E;;AAED,WAAS,YAAY,CAAE,KAAK,EAAE,MAAM,EAAE;AACpC,QAAI,OAAO,GAAG,MAAM,CAChB,OAAO,CAAC,IAAI,EAAE,cAAc,CAAC,CAC7B,OAAO,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;;AAElC,QAAI,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,OAAO,GAAG,GAAG,CAAC,CAAC;AAC1C,WAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GACxB;;AAED,WAAS,aAAa,GAAI;AACxB,QAAI,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,SAAS,CAAC,CAAC,CAAC,AAAC,KAAK,QAAQ,EAAE;AAC/D,UAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;UACtC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC;AAC5D,aAAO,EAAC,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,EAAC,CAAC;KACnC;AACD,WAAO,EAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,EAAC,CAAC;GAClD;;AAED,WAAS,IAAI,CAAE,GAAG,EAAE;AAClB,QAAI,OAAO,GAAG,KAAK,WAAW,EAC5B,OAAO;AACT,WAAO,GAAG,CAAC,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;GACjD;;AAED,SAAO,OAAO,CAAC;CAChB,CAAA,EAAG,CAAC;;;AAIL,IAAI,OAAO,OAAO,KAAK,WAAW,EAChC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC","file":"loggify.js","sourcesContent":["var loggify = (function () {\n  var config = {\n    filter: '_global_',\n    delimiter: '@'\n  };  \n\n  var loggify = function () {\n    var args = normalizeArgs.apply(null, arguments);\n    if (!isAllowed(args.msg, args.filter))\n      return;\n      \n    if (args.msg instanceof Array)\n      console.log.apply(null, args.msg);\n    else\n      console.log.call(null, args.msg);\n  };\n\n  loggify.show = function (filter) {\n    config.filter = filter;\n  };\n\n  function isAllowed (msg, filter) {\n    if (typeof filter === 'undefined')\n      return config.filter === '_global_';\n    else\n      return filter === config.filter || passesFilter(filter, config.filter);\n  }\n\n  function passesFilter (input, filter) {\n    var pattern = filter.\n        replace('/*', '(\\/[^\\/].+)*').\n        replace('*/', '([^\\/].+\\/)*');\n    \n    var reg = new RegExp('^' + pattern + '$');\n    return reg.test(input);\n  }\n\n  function normalizeArgs () {\n    if (arguments.length === 1 && typeof(arguments[0]) === 'string') {\n      var msg = trim(arguments[0].split('@')[0]),\n          filter = trim(arguments[0].split('@')[1]) || '_global_';\n      return {msg: msg, filter: filter};\n    }\n    return {msg: arguments[0], filter: arguments[1]};\n  }\n\n  function trim (str) {\n    if (typeof str === 'undefined')\n      return;\n    return str.replace(/^(\\s|\\n)*|(\\s|\\n)*$/gm, '');\n  }\n  \n  return loggify;\n})();\n\n\n//NodeJS wrapper\nif (typeof exports !== 'undefined')\n  exports.loggify = loggify;\n"],"sourceRoot":"/source/"}